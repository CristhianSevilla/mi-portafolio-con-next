{
  "bocados-elite": {
    "title": "Bocados Élite",
    "type": "Aplicación Web de Quiosco Digital",
    "about": "Acerca del proyecto",
    "description1": "Sistema completo de quiosco digital para restaurante con interfaz intuitiva que permite a los clientes explorar el menú, personalizar pedidos y realizar compras de manera autónoma. Incluye gestión de categorías, productos con imágenes, carrito de compras dinámico y sistema de notificaciones en tiempo real.",
    "description2": "La aplicación cuenta con un flujo de pedido optimizado de 3 pasos: selección de productos, revisión del pedido y confirmación con datos del cliente. Los usuarios pueden editar cantidades, eliminar productos y ver el total actualizado automáticamente.",
    "description3": "Diseño completamente responsivo con navegación móvil tipo hamburguesa, optimizado tanto para dispositivos táctiles como de escritorio. La interfaz utiliza un esquema de colores elegante en tonos ámbar que refleja la identidad de marca premium.",
    "description4": "Panel de administración independiente para gestionar órdenes en tiempo real, con sistema de cobro integrado que calcula automáticamente el cambio y permite marcar pedidos como completados. Actualización automática cada 3 segundos para mostrar nuevas órdenes.",
    "stack": "Stack Tecnológico",
    "stackDescription": "Frontend desarrollado con React 18 y Next.js 13 para renderizado híbrido y optimización SEO. Gestión de estado global con Context API y hooks personalizados. Axios para comunicación HTTP con interceptores de error. Tailwind CSS para diseño modular y responsivo con clases utilitarias.",
    "database": "Base de datos PostgreSQL gestionada con Prisma ORM para tipado seguro y migraciones automáticas. Esquema relacional optimizado para categorías, productos y órdenes. API Routes de Next.js para endpoints RESTful con validación de métodos HTTP.",
    "notifications": "Sistema de notificaciones implementado con React Toastify para feedback inmediato al usuario. Notificaciones diferenciadas por tipo de acción: confirmación de pedidos, actualizaciones de carrito, errores de validación y confirmaciones de pago.",
    "clientSite": "Interfaz Cliente",
    "adminSite": "Panel Administrativo",
    "viewCode": "Ver Código Fuente"
  },
  "guitar-los-angeles": {
    "title": "Guitar Los Ángeles",
    "type": "Tienda Online",
    "about": "Acerca del proyecto",
    "description1": "En la página principal se muestran algunas guitarras, información de cursos y algunos posts del blog de consejos para ayudar a los guitarristas a mejorar, aprender nuevos estilos de música y obtener inspiración.",
    "description2": "En la tienda se muestran todas las guitarras con su imágen y descripción. Para ver más detalles y agregar una guitarra al carrito de compras, hay que hacer clic en el botón \"ver producto\".",
    "description3": "El blog tiene todos los posts, cada uno con una imagen, la fecha de publicación y su contenido.",
    "cartTitle": "¿Cómo funciona el carrito de compras?",
    "cartDescription1": "Es un carrito de compras intuitivo. Permite a los clientes agregar guitarras y ver los detalles de cada una, como su imagen, precio, cantidad y el total a pagar. También permite editar la cantidad o eliminar un modelo de forma rápida y sencilla, y el total a pagar se actualiza automáticamente.",
    "cartDescription2": "Del lado derecho de la pantalla se encuentra un panel con el resumen del pedido y total general a pagar. Cualquier cambio que el cliente haga en el carrito se reflejará automáticamente en la cantidad general de la compra.",
    "stack": "Stack del proyecto",
    "stackDescription": "Para el Front-End, usé React y NextJS para crear interfaces rápidas, responsivas e interactivas. Para el Back-End, utilicé Strapi para crear APIs y PostgreSQL para gestionar los datos de forma eficiente y escalable.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código",
    "myRole": "Mi papel",
    "myRoleDescription": "El objetivo del sitio web es brindar una excelente experiencia, para lograrlo utilicé las técnicas y herramientas más recientes en el desarrollo web.",
    "metaInfo": "Cada página del sitio web tiene su propia información meta, que se proporciona a través de los props del componente \"Layout Principal\" y que son insertados como variables en el HTML del next/head.",
    "imageOptimization": "Para garantizar que las imágenes se carguen rápidamente, utilicé next/image, lo que mejora significativamente el performance del sitio web",
    "routing": "Utilicé el modelo de rutas de NextJS y next/link para la navegación entre páginas. Aproveché el pathname del Hook useRouter de Next, para resaltar el link del menú de la página en la que el usuario se encuentra navegando.",
    "styling": "Para darle estilo y personalidad al sitio web utilicé CSS Modules, y creé el archivo _document.js para importar hojas de estilos externas.",
    "cart": "En el carrito de compras utilicé el context de NextJS. Para hacer que el carrito fuera dinámico, utilicé el Hook useState y los array methods de JavaScript (some, map, filter y reduce). Utilicé el Hook useEffect para calcular el total a pagar y utilicé local storage para almacenar la información del carrito.",
    "hydration": "Finalmente solucione los problemas de rehidratación de NextJS.",
    "api": "API",
    "apiDescription": "Pensé que la mejor opción era utilizar getStaticProps para consultar la API, ya que la información publicada en el sitio web no necesita cambios constantes.",
    "apiImplementation": "Oculte la url de la API utilizando una variable de entorno. Después hice una solicitud de datos (Fetch) a la url. Utilicé la técnica de \"destructuring\" para acceder directamente a las guitarras en los datos obtenidos. Y retorne las guitarras dentro de los props de la función.",
    "guitarComponent": "Para mostrar las guitarras en la tienda, utilicé el componente \"Guitarra\", este componente se encarga de renderizar una guitarra por cada conjunto de datos que recibe a través de los \"props\".",
    "dynamicRouting": "Generé las URLs de las guitarras utilizando el routing dinámico de NextJS con getStaticPaths y getStaticProps.",
    "blogImplementation": "Hice lo mismo para crear el blog y sus posts.",
    "backend": "Strapi, PostgreSQL y Cloudinary",
    "backendDescription": "Este proyecto tiene un Back-End, sin embargo, lo he clasificado como un proyecto Front-End, ya que el Back fue creado con un CMS llamado Strapi, que se conecta a una base de datos PostgreSQL y a Cloudinary para almacenar las imágenes en un servidor externo. Debido a esto, el proyecto tiene habilitado el acceso a los End Points de la API."
  },
  "barber-club": {
    "title": "Barber Shop V&M",
    "type": "Aplicación web",
    "about": "Acerca del proyecto",
    "description1": "Tiene una interfaz fácil de usar que hace que el proceso sea fácil, rápido y sin esfuerzo. En la app web se puede reservar una cita desde cualquier lugar y en cualquier momento.",
    "description2": "Simplemente el cliente se registra con su correo electrónico y con solo unos clics, puede elegir el día, la hora y los servicios que más le convengan. Y si en algún momento olvida su contraseña, puede restablecerla fácilmente.",
    "description3": "Una vez que el cliente haya reservado su cita, tendrá acceso a un resumen detallado que incluye la fecha, hora, servicios y el total a pagar. Y si cambia de opinión o necesita ajustar la hora o los servicios, puede editar o eliminar la cita en cualquier momento, justo como si estuviera en un carrito de compras.",
    "description4": "Los administradores de la aplicación pueden acceder a todas las citas del día, pero también tiene la opción de buscar citas por fechas específicas y si necesitan añadir un nuevo servicio, eliminar o modificar uno existente lo pueden hacer fácilmente.",
    "stack": "Stack del proyecto",
    "stackDescription": "Este proyecto usa tecnología avanzada para mejorar la experiencia del usuario. La aplicación web utiliza el patrón Modelo-Vista-Controlador (MVC) para que sea más fácil de desarrollar y mantener. Además, el lenguaje de programación PHP 8 se usa para que la gestión de datos sea más segura y rápida. La interfaz de usuario está creada con HTML 5, CSS 3 con SASS y JavaScript, para que sea visualmente atractiva e interactiva. La base de datos que se utiliza es MySQL para que sea segura y eficiente en la gestión de datos.",
    "myRole": "Mi papel",
    "myRoleDescription": "Para hacer una aplicación web que funcione bien en diferentes dispositivos, utilicé tecnologías de maquetación modernas como Flexbox y Grid, También usé JavaScript para hacer la aplicación más interactiva, con un paginador, fechas en un formato legible y alertas.",
    "apiConnection": "Para mantener la aplicación actualizada, usé Fetch y Async Await para conectarme a una API y obtener información.",
    "optimization": "Además, utilicé Gulp para comprimir y optimizar las imágenes y para compilar y organizar los archivos de estilo y javascript.",
    "backend": "Utilicé PHP8 para programar la estructura de la página web, incluyendo las funciones para crear, leer, actualizar y eliminar servicios y citas. También agregué medidas de seguridad, como autenticación de usuarios y validación de formularios, para proteger la página y la base de datos de inyecciones de código malicioso.",
    "features": "Además, usé PHP8 para crear los end points de la API, implementar funciones de hasheo de contraseñas, enviar correos electrónicos de confirmación y restablecer contraseñas, y calcular el costo de cada cita.",
    "database": "Para la base de datos, utilicé MySQL y configuré restricciones de integridad referencial para garantizar la precisión de los datos. También diseñé una consulta JOIN para extraer y visualizar de forma clara la información necesaria sobre cada cita.",
    "testing": "Finalmente, realicé pruebas utilizando Cypress para identificar y solucionar posibles problemas en las rutas, elementos HTML, estilos CSS, alertas, mensajes y errores que podrían surgir durante el proceso.",
    "note": "Nota: Si desea ver la funcionalidad de confirmar cuenta o resetear la contraseña póngase en contacto conmigo para otorgarle acceso a la cuenta de MailTrap.",
    "viewCode": "Ver código"
  },
  "client-connect": {
    "title": "Administra Clientes",
    "type": "CRM",
    "about": "Acerca del proyecto",
    "description1": "Brinda al usuario la capacidad de tener todo el control que necesita para manejar a sus clientes de manera efectiva y eficiente.",
    "description2": "Una de las características más útiles del CRM es su capacidad para evitar registros duplicados. Además, el formulario de registro es fácil de usar, lo que le permite agregar nuevos clientes de manera rápida y sencilla.",
    "description3": "Una vez que haya registrado a sus clientes, podrá acceder a la sección de gestión de clientes, donde podrás ver, editar o eliminar toda la información relevante de cada uno de ellos.",
    "stack": "Stack del proyecto",
    "stackDescription": "El proyecto emplea React y React Router Dom para diseñar las interfaces de usuario y administrar el estado de la aplicación. Además utiliza Fetch con los métodos HTTP apropiados para interactuar con la API REST. Esto significa que siempre tendrá acceso a los datos más actualizados.",
    "myRole": "Mi papel",
    "myRoleDescription": "He desarrollado el sitio web con el propósito de optimizar la experiencia de usuario. Para ello, he aplicado técnicas avanzadas de diseño y desarrollo web",
    "tailwindSetup": "Desarrollé componentes React para la interfaz de usuario. Para utilizar Tailwind en el diseño del sitio web, realicé las configuraciones necesarias en los archivos de \"Tailwind\" y \"CSS\" e instalé las dependencias correspondientes.",
    "routing": "Usé React Router Dom, el componente Link, useNavigate y Path para definir rutas y para la navegación principal. Implementé el Hook redirect para redirigir al usuario. Para resaltar enlaces del menú utilicé useLocation y pathName Y para mostrar componentes dentro del componente \"Layout\", utilicé Outlet y Element.",
    "formHandling": "Al registrar un nuevo cliente utilizo el componente Form y el método POST, el cual busca un Action para obtener los datos del formulario. Verifico que todos los campos estén llenos y que el usuario haya ingresado un correo válido, si salta un error en estas validaciones se renderiza el componente \"Error\". Además, utilicé el errorElement para capturar y mejorar el diseño de los mensajes de error que surgen en caso de problemas con la página o la API.",
    "apiRest": "API REST",
    "apiSecurity": "Para crear y usar una API de forma segura, usé json-server y protegí su URL en variables de entorno para mayor control y seguridad de la información compartida.",
    "apiQuery": "Para consultar la API utilicé el Hook useLoaderData y una función asíncrona que hace Fetch a la URL de la API para obtener una respuesta JSON y mostrar la información de los clientes eficientemente.",
    "apiCreate": "Para agregar un nuevo cliente a la API, utilicé una función asíncrona que recibe los datos del cliente y en un bloque try-catch, si hay un error, muestra un mensaje, de lo contrario, ejecuta el try y realiza un Fetch hacia la URL de la API. Utiliza el método POST, un body que contiene los datos que se enviarán y un header que indica el tipo de contenido.",
    "apiDynamic": "Para obtener la información un cliente en particular, usé el routing dinámico para inyectar su ID en la URL. Luego, cargué el ID del cliente usando un loader y lo verifiqué con la API. Si el cliente no existe, mostré un error. Si existe, llené automáticamente el formulario para editar la información del cliente.",
    "apiUpdate": "He usado un \"action\" para editar los datos de un cliente. Este \"action\" recibe un request para obtener los datos y validarlos antes de enviarlos. También utiliza \"params\" para obtener el ID del cliente y enviarlo como parámetro a la función que actualizará los datos del cliente. La función recibe el ID y los datos actualizados del cliente, y los escribe en la API utilizando el método PUT.",
    "apiDelete": "Para eliminar a un cliente usé \"Form\". Consulté en la API con el método \"PUT\", después en un action instancié la función Eliminar, dicha función recibe como parámetro el ID del cliente y lo elimina usando el método DELETE.",
    "deleteConfirmation": "Antes de borrar al cliente, agregué un mensaje de confirmación para que el usuario decida si quiere continuar o no. Si acepta, el cliente se elimina y se redirige al usuario a la página principal.",
    "viewCode": "Ver Código"
  },
  "crypto-check": {
    "title": "Cotiza Criptos",
    "type": "Aplicación Web",
    "about": "Acerca del proyecto",
    "description1": "Es una aplicación web que cotiza en tiempo real el precio de las 20 Criptomonedas con más valor o capitalización en el mercado.",
    "description2": "Para usarla, elige una moneda o divisa y una criptomoneda y haz clic en cotizar. La aplicación mostrará el precio de la criptomoneda en la moneda elegida, junto con su imagen, el precio más alto y más bajo del día, su variación en las últimas 24 horas y la última actualización de los datos de la criptomoneda.",
    "description3": "También se pueden cotizar otras criptomonedas simplemente cambiando los datos.",
    "stack": "Stack del proyecto",
    "stackDescription": "Para crear una experiencia de usuario rápida y altamente interactiva, he seleccionado cuidadosamente las tecnologías adecuadas para este proyecto. Utilicé React, una de las herramientas más populares para construir interfaces de usuario eficientes.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  },
  "trago-trax": {
    "title": "Trago Trax",
    "type": "Sitio Web",
    "about": "Acerca del proyecto",
    "description1": "Sitio web. Facilita la búsqueda de bebidas y cócteles exquisitos mediante una organización por categorías cuidadosamente seleccionadas.",
    "description2": "Permitiéndote encontrar las recetas de bebidas perfectas que se ajusten a tus preferencias y necesidades individuales.",
    "description3": "Cuando un usuario hace clic en el botón ver receta de cualquier bebida, se abre una ventana emergente modal que muestra una tarjeta informativa. En esta tarjeta se proporciona la imagen de la bebida, el nombre de la receta, las instrucciones y los ingredientes de la receta",
    "stack": "Stack del proyecto",
    "stackDescription": "La aplicación web se construyó con un potente stack tecnológico que incluye Vite como build tool y bundler, React para la creación de una interfaz de usuario dinámica, y Bootstrap para agilizar el diseño responsive. Implementé Context API de React para gestionar eficientemente el estado de la aplicación, y utilicé JavaScript para desarrollar funcionalidades interactivas. Para realizar peticiones a APIs externas, confié en Axios, lo que me permitió acceder a datos actualizados y proporcionar una experiencia fluida y eficiente a nuestros usuarios.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  },
  "pelis-pulse": {
    "title": "Pelis Pulse",
    "type": "Sitio Web",
    "about": "Acerca del proyecto",
    "description1": "Es un sitio web que tiene como objetivo principal facilitar la búsqueda de películas clasificadas por géneros, como aventura, terror, etc. Al realizar una búsqueda, el sitio web muestra todas las películas disponibles en ese género en particular, comenzando por las más recientes y populares. Para cada película, se muestra su portada, nombre y fecha de estreno.",
    "description2": "Cuando un usuario hace clic en una película, se abre una ventana emergente modal que muestra una tarjeta informativa. En esta tarjeta se proporciona el nombre de la película, su póster, las categorías a las que pertenece, la calificación basada en un número de votos y un botón que permite ver un resumen de la película.",
    "description3": "Además de la funcionalidad de búsqueda y visualización de películas, el sitio web cuenta con un paginador que permite al usuario navegar de página en página. Cada página muestra un total de 20 películas, lo que ayuda a organizar y presentar la información de manera más manejable y accesible.",
    "stack": "Stack del proyecto",
    "stackDescription": "Desarrollé un proyecto utilizando un potente stack tecnológico. Utilicé Vite como entorno de desarrollo, React como biblioteca principal para construir una interfaz de usuario modular y eficiente, haciendo uso de Hooks y Context para gestionar el estado de forma elegante. Para la comunicación con el servidor, utilicé Axios y para el diseño visual, mui-material y material-icons. El resultado fue un proyecto eficiente y visualmente atractivo. Estoy muy satisfecho con los resultados obtenidos utilizando estas tecnologías.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  },
  "auto-seguro": {
    "title": "Auto Seguro",
    "type": "Aplicación Web",
    "about": "Acerca del proyecto",
    "description1": "Aplicación web que simula la cotización de seguros para automóviles, brinda la oportunidad de obtener una cotización, considerando diversos factores como la diferencia de años, la marca de tu vehículo y el plan de seguro que se elija.",
    "description2": "Para obtener una cotización precisa, simplemente se debe llenar el formulario detallado y, en función de las opciones selecciones, se ejecuta un algoritmo para calcular el costo total del seguro.",
    "description3": "El algoritmo comienza con un valor base de 2000 y, para reflejar adecuadamente la depreciación del automóvil, resta un 3% por cada año de diferencia. Luego, ajusta el costo multiplicando el resultado por un factor específico según la marca del automóvil y el plan de seguro seleccionado. Finalmente, devuelve un resultado.",
    "stack": "Stack del proyecto",
    "stackDescription": "Desarrollé el proyecto utilizando Vite, una herramienta de desarrollo rápida, junto con React y sus hooks como useCallback y useRef. Además, implementé Context API para el manejo eficiente de los datos en la aplicación. También me aseguré de que el diseño fuera excelente. Para lograrlo, utilicé Tailwind CSS, una biblioteca personalizable que me permitió crear una interfaz atractiva y fácil de usar.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  },
  "bienes-raices": {
    "title": "Bienes Raíces",
    "type": "Sitio Web",
    "about": "Acerca del proyecto",
    "description1": "Sitio web con anuncios de casas en venta, el usuario tiene la oportunidad de pedir información sobre una propiedad en venta o para publicar un anuncio de su propiedad en venta. El sitio también cuenta con un blog de consejos y una sección de testimoniales. El administrador tiene todo el control sobre anuncios, vendedores y posts.",
    "description2": "Me encargué de maquetar el diseño del proyecto con HTML5, CSS3 (Flexbox, Grid), SASS y JavaScript para el menú de hamburguesa y modo oscuro de la aplicación. Todo el sitio web por parte del cliente tiene un diseño responsivo.",
    "description3": "En el Back-End creé y normalice la base de datos MySQL, programé en PHP 8 el CRUD de propiedades y vendedores, realicé la autenticación de usuarios, de forma que las URLs que pertenecen al administrador estén protegidas por un inicio de sesión con contraseñas hasheadas. Cada formulario esté validado según los requerimientos y protegido para evitar inyección de código.",
    "stack": "Stack del proyecto",
    "stackDescription": "Es una aplicación web desarrollada utilizando el patrón Modelo-Vista-Controlador (MVC) y está basada en el lenguaje de programación PHP. Además, utiliza HTML, CSS y JavaScript para la creación de la interfaz de usuario y la interacción con el usuario en el lado del cliente. La base de datos que se utiliza en la aplicación es MySQL.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  },
  "weather-finder": {
    "title": "Clima Now",
    "type": "Aplicación Web",
    "about": "Acerca del proyecto",
    "description1": "Es una aplicación web que proporciona información actualizada sobre las condiciones climáticas de varias ubicaciones. Esta aplicación permite a los usuarios acceder a la página web y proporcionar el nombre de una ciudad específica y seleccionar un país en particular.",
    "description2": "Una vez que se ingresa esta información, el sitio web recopilará datos meteorológicos de fuentes externas a través de una API para solicitar y recibir los datos climáticos correspondientes a la ubicación especificada por el usuario.",
    "description3": "Cuando los datos meteorológicos son obtenidos de la API, la aplicación se encarga de presentarlos al usuario de manera clara y comprensible.",
    "stack": "Stack del proyecto",
    "stackDescription": "En este proyecto, utilicé un stack compuesto por Vite, React, Hooks, Context, JavaScript y Axios. Vite proporcionó un entorno de desarrollo rápido, mientras que React, junto con los Hooks y el Context, simplificaron la creación de interfaces interactivas y la gestión del estado de los componentes. JavaScript fue el lenguaje de programación utilizado para la lógica del proyecto, y Axios se encargó de las solicitudes HTTP.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  },
  "plan-gastos": {
    "title": "Plan Gastos",
    "type": "Aplicación Web",
    "about": "Acerca del proyecto",
    "description1": "La aplicación ayuda a gestionar gastos fácilmente. Puedes agregar, editar y eliminar gastos y filtrarlos por categoría para saber en qué gastas tu dinero. La aplicación también muestra una gráfica que actualiza automáticamente tu presupuesto total, disponible y gastado.",
    "description2": "Al abrir la aplicación, se te pide que ingreses tu presupuesto. Después, puedes ver la página principal con una gráfica y un botón para agregar gastos de diferentes categorías, como comida, transporte, entretenimiento, etc.",
    "description3": "Puedes eliminar o editar gastos existentes deslizando hacia la derecha o izquierda. Al agregar un nuevo gasto, se te pedirá que escribas su nombre, la cantidad gastada y la categoría.",
    "stack": "Stack del proyecto",
    "stackDescription": "En este proyecto se usaron varias herramientas tecnológicas. Se utilizó vite para crear la aplicación y React para crear componentes de interfaz de usuario y actualizar la página automáticamente. También se usaron Hooks de React para acceder al state y otros métodos sin necesidad de crear clases. CSS se usó para dar estilo a la aplicación y Local Storage para almacenar y recuperar los datos de presupuesto de los usuarios.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  },
  "cafe-adicto": {
    "title": "Café Adicto",
    "type": "Sitio Web",
    "about": "Acerca del proyecto",
    "description1": "Este sitio web es un paraíso para los amantes del café, donde podrán encontrar todo lo que necesitan saber sobre este maravilloso mundo y sumergirse en sus colores, aromas y sabores.",
    "description2": "Dentro del sitio web, existen diferentes secciones, como cursos y talleres con los que podrán aprender de la mano de expertos y convertirse en verdaderos conocedores del café. Además, cuenta con historias emocionantes y deliciosas recetas. También tiene una sección de contacto con un formulario muy atractivo.",
    "description3": "Me encargué de maquetar todo el diseño del proyecto haciendo uso de las últimas tecnologías como HTML5 y CSS3, y he utilizado técnicas avanzadas como display grid y flex para asegurarme de que cada sección se adapte perfectamente a cualquier dispositivo en el que se visualice el proyecto.",
    "stack": "Stack del proyecto",
    "stackDescription": "En cuanto al stack de este proyecto, usa tecnologías de vanguardia como HTML5 y CSS. El diseño moderno y elegante está creado con Grid y Flexbox, lo que garantiza una experiencia de usuario excepcionalmente fluida.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  },
  "healthy-pets": {
    "title": "Healthy Pets",
    "type": "Aplicación Web",
    "about": "Acerca del proyecto",
    "description1": "La aplicación web está destinada a ser utilizada por veterinarias para ayudarles a realizar un seguimiento de la información médica y de salud de las mascotas de manera organizada y fácil de usar.",
    "description2": "El usuario puede agregar información sobre cada mascota de sus clientes, incluyendo nombre, nombre del propietario, información de contacto y notas adicionales. Además, podrá agregar información médica crucial, como la fecha de alta al veterinario y los síntomas de la mascota.",
    "description3": "Una vez que haya dado de alta a un paciente, aparecerá en una lista organizada y fácilmente administrable. Podrá editar o eliminar información en cualquier momento, lo que significa que tendrá un control total sobre la información de salud y médica de cada mascota.",
    "stack": "Stack del proyecto",
    "stackDescription": "Utilice el framework de JavaScript, React, para garantizar que la aplicación sea altamente funcional y rápida. Además, me asegure de que el diseño sea atractivo, moderno y totalmente responsive utilizando Tailwind CSS para estilizar la interfaz. El formulario cuenta con validaciones y los datos se almacenan en Local Storage.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  },
  "emfestival": {
    "title": "EMFestival",
    "type": "Landing Page",
    "about": "Acerca del proyecto",
    "description1": "Electronic Music Festival es una landing Page que tiene la finalidad de brindar información acerca del evento. La primera impresión al entrar a la página es transmitir a través de un video de fondo la emoción de vivir la experiencia de estar presente el día del evento.",
    "description2": "Tiene diferentes secciones, por ejemplo, el LineUp con los DJ's que se estarán presentando, una galería de fotos y una sección de información acerca de los boletos.",
    "description3": "Fui el encargado de maquetar el diseño completo de la página, desde la estructura con HTML5, y los estilos con CSS3 (flex y grid), codificado en SASS. La página es totalmente responsiva, es decir se adapta a diferentes dispositivos.",
    "stack": "Stack del proyecto",
    "stackDescription": "Para la funcionalidad y animaciones, el sitio utiliza JavaScript y algunos plugins JavaScript de terceros, como SmoothScroll y ScrollReveal. Además, el sitio utiliza CSS Grid y Flexbox para el diseño y la maquetación de los elementos de la página.",
    "viewWebsite": "Ver Sitio Web",
    "viewCode": "Ver Código"
  }
}