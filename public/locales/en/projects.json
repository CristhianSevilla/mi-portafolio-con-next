{
  "bocados-elite": {
    "title": "Bocados Elite",
    "type": "Digital Kiosk Web Application",
    "about": "About the project",
    "description1": "Complete digital kiosk system for restaurants with intuitive interface that allows customers to explore the menu, customize orders and make purchases autonomously. Includes category management, products with images, dynamic shopping cart and real-time notification system.",
    "description2": "The application features an optimized 3-step ordering flow: product selection, order review and confirmation with customer data. Users can edit quantities, remove products and see the total updated automatically.",
    "description3": "Fully responsive design with hamburger-style mobile navigation, optimized for both touch and desktop devices. The interface uses an elegant amber color scheme that reflects the premium brand identity.",
    "description4": "Independent administration panel to manage orders in real time, with integrated payment system that automatically calculates change and allows marking orders as completed. Automatic update every 3 seconds to show new orders.",
    "stack": "Technology Stack",
    "stackDescription": "Frontend developed with React 18 and Next.js 13 for hybrid rendering and SEO optimization. Global state management with Context API and custom hooks. Axios for HTTP communication with error interceptors. Tailwind CSS for modular and responsive design with utility classes.",
    "database": "PostgreSQL database managed with Prisma ORM for type-safe and automatic migrations. Optimized relational schema for categories, products and orders. Next.js API Routes for RESTful endpoints with HTTP method validation.",
    "notifications": "Notification system implemented with React Toastify for immediate user feedback. Differentiated notifications by action type: order confirmations, cart updates, validation errors and payment confirmations.",
    "clientSite": "Client Interface",
    "adminSite": "Administrative Panel",
    "viewCode": "View Source Code"
  },
  "guitar-los-angeles": {
    "title": "Guitar Los Angeles",
    "type": "Online Store",
    "about": "About the project",
    "description1": "The main page shows some guitars, course information and some blog posts with tips to help guitarists improve, learn new music styles and get inspiration.",
    "description2": "The store shows all guitars with their image and description. To see more details and add a guitar to the shopping cart, you have to click the 'view product' button.",
    "description3": "The blog has all the posts, each with an image, publication date and content.",
    "cartTitle": "How does the shopping cart work?",
    "cartDescription1": "It is an intuitive shopping cart. It allows customers to add guitars and see the details of each one, such as its image, price, quantity and the total to pay. It also allows editing the quantity or removing a model quickly and easily, and the total to pay is updated automatically.",
    "cartDescription2": "On the right side of the screen there is a panel with the order summary and total amount to pay. Any change the customer makes to the cart will be automatically reflected in the overall purchase amount.",
    "stack": "Project Stack",
    "stackDescription": "For the Front-End, I used React and NextJS to create fast, responsive and interactive interfaces. For the Back-End, I used Strapi to create APIs and PostgreSQL to manage data efficiently and scalably.",
    "viewWebsite": "View Website",
    "viewCode": "View Code",
    "myRole": "My Role",
    "myRoleDescription": "The goal of the website is to provide an excellent experience, to achieve this I used the most recent techniques and tools in web development.",
    "metaInfo": "Each page of the website has its own meta information, which is provided through the props of the \"Main Layout\" component and which are inserted as variables in the HTML of next/head.",
    "imageOptimization": "To ensure that images load quickly, I used next/image, which significantly improves the performance of the website",
    "routing": "I used the NextJS routing model and next/link for navigation between pages. I took advantage of the pathname from Next's useRouter Hook, to highlight the menu link of the page the user is currently browsing.",
    "styling": "To give style and personality to the website I used CSS Modules, and created the _document.js file to import external stylesheets.",
    "cart": "In the shopping cart I used NextJS context. To make the cart dynamic, I used the useState Hook and JavaScript array methods (some, map, filter and reduce). I used the useEffect Hook to calculate the total to pay and used local storage to store the cart information.",
    "hydration": "Finally I solved the NextJS rehydration problems.",
    "api": "API",
    "apiDescription": "I thought the best option was to use getStaticProps to query the API, since the information published on the website does not need constant changes.",
    "apiImplementation": "I hid the API url using an environment variable. Then I made a data request (Fetch) to the url. I used the \"destructuring\" technique to directly access the guitars in the obtained data. And I returned the guitars within the function props.",
    "guitarComponent": "To display the guitars in the store, I used the \"Guitar\" component, this component is responsible for rendering one guitar for each data set it receives through the \"props\".",
    "dynamicRouting": "I generated the guitar URLs using NextJS dynamic routing with getStaticPaths and getStaticProps.",
    "blogImplementation": "I did the same to create the blog and its posts.",
    "backend": "Strapi, PostgreSQL and Cloudinary",
    "backendDescription": "This project has a Back-End, however, I have classified it as a Front-End project, since the Back was created with a CMS called Strapi, which connects to a PostgreSQL database and to Cloudinary to store images on an external server. Due to this, the project has enabled access to the API End Points."
  },
  "barber-club": {
    "title": "Barber Shop V&M",
    "type": "Web Application",
    "about": "About the project",
    "description1": "It has an easy-to-use interface that makes the process easy, fast and effortless. In the web app you can book an appointment from anywhere and at any time.",
    "description2": "The client simply registers with their email and with just a few clicks, they can choose the day, time and services that suit them best. And if they ever forget their password, they can easily reset it.",
    "description3": "Once the client has booked their appointment, they will have access to a detailed summary that includes the date, time, services and total to pay. And if they change their mind or need to adjust the time or services, they can edit or delete the appointment at any time, just like if they were in a shopping cart.",
    "description4": "Application administrators can access all appointments for the day, but also have the option to search for appointments by specific dates and if they need to add a new service, delete or modify an existing one they can do so easily.",
    "stack": "Project Stack",
    "stackDescription": "This project uses advanced technology to improve the user experience. The web application uses the Model-View-Controller (MVC) pattern to make it easier to develop and maintain. Additionally, the PHP 8 programming language is used to make data management more secure and faster. The user interface is created with HTML 5, CSS 3 with SASS and JavaScript, to make it visually attractive and interactive. The database used is MySQL to make it secure and efficient in data management.",
    "myRole": "My Role",
    "myRoleDescription": "To make a web application that works well on different devices, I used modern layout technologies like Flexbox and Grid, I also used JavaScript to make the application more interactive, with a paginator, dates in a readable format and alerts.",
    "apiConnection": "To keep the application updated, I used Fetch and Async Await to connect to an API and get information.",
    "optimization": "Additionally, I used Gulp to compress and optimize images and to compile and organize style and javascript files.",
    "backend": "I used PHP8 to program the structure of the web page, including functions to create, read, update and delete services and appointments. I also added security measures, such as user authentication and form validation, to protect the page and database from malicious code injection.",
    "features": "Additionally, I used PHP8 to create API endpoints, implement password hashing functions, send confirmation emails and reset passwords, and calculate the cost of each appointment.",
    "database": "For the database, I used MySQL and configured referential integrity constraints to ensure data accuracy. I also designed a JOIN query to extract and clearly display the necessary information about each appointment.",
    "testing": "Finally, I performed tests using Cypress to identify and solve possible problems in routes, HTML elements, CSS styles, alerts, messages and errors that could arise during the process.",
    "note": "Note: If you want to see the functionality of confirming account or resetting password, please contact me to grant you access to the MailTrap account.",
    "viewCode": "View Code"
  },
  "client-connect": {
    "title": "Client Management",
    "type": "CRM",
    "about": "About the project",
    "description1": "Provides the user with the ability to have all the control they need to manage their clients effectively and efficiently.",
    "description2": "One of the most useful features of the CRM is its ability to prevent duplicate records. Additionally, the registration form is easy to use, allowing you to add new clients quickly and easily.",
    "description3": "Once you have registered your clients, you will be able to access the client management section, where you can view, edit or delete all relevant information for each of them.",
    "stack": "Project Stack",
    "stackDescription": "The project uses React and React Router Dom to design user interfaces and manage application state. It also uses Fetch with appropriate HTTP methods to interact with the REST API. This means you will always have access to the most up-to-date data.",
    "myRole": "My Role",
    "myRoleDescription": "I have developed the website with the purpose of optimizing the user experience. To achieve this, I have applied advanced web design and development techniques",
    "tailwindSetup": "I developed React components for the user interface. To use Tailwind in the website design, I made the necessary configurations in the \"Tailwind\" and \"CSS\" files and installed the corresponding dependencies.",
    "routing": "I used React Router Dom, the Link component, useNavigate and Path to define routes and for main navigation. I implemented the redirect Hook to redirect the user. To highlight menu links I used useLocation and pathName And to display components within the \"Layout\" component, I used Outlet and Element.",
    "formHandling": "When registering a new client I use the Form component and the POST method, which looks for an Action to get the form data. I verify that all fields are filled and that the user has entered a valid email, if an error occurs in these validations the \"Error\" component is rendered. Additionally, I used the errorElement to capture and improve the design of error messages that arise in case of problems with the page or API.",
    "apiRest": "REST API",
    "apiSecurity": "To create and use an API securely, I used json-server and protected its URL in environment variables for greater control and security of shared information.",
    "apiQuery": "To query the API I used the useLoaderData Hook and an asynchronous function that makes Fetch to the API URL to get a JSON response and display client information efficiently.",
    "apiCreate": "To add a new client to the API, I used an asynchronous function that receives the client data and in a try-catch block, if there is an error, it shows a message, otherwise, it executes the try and makes a Fetch to the API URL. It uses the POST method, a body that contains the data to be sent and a header that indicates the content type.",
    "apiDynamic": "To get information for a particular client, I used dynamic routing to inject their ID into the URL. Then, I loaded the client ID using a loader and verified it with the API. If the client doesn't exist, I showed an error. If it exists, I automatically filled the form to edit the client information.",
    "apiUpdate": "I used an \"action\" to edit a client's data. This \"action\" receives a request to get the data and validate it before sending it. It also uses \"params\" to get the client ID and send it as a parameter to the function that will update the client data. The function receives the ID and updated client data, and writes it to the API using the PUT method.",
    "apiDelete": "To delete a client I used \"Form\". I queried the API with the \"PUT\" method, then in an action I instantiated the Delete function, this function receives the client ID as a parameter and deletes it using the DELETE method.",
    "deleteConfirmation": "Before deleting the client, I added a confirmation message so the user can decide whether to continue or not. If they accept, the client is deleted and the user is redirected to the main page.",
    "viewCode": "View Code"
  },
  "crypto-check": {
    "title": "Crypto Quotes",
    "type": "Web Application",
    "about": "About the project",
    "description1": "It is a web application that quotes in real time the price of the 20 Cryptocurrencies with the highest value or market capitalization.",
    "description2": "To use it, choose a currency and a cryptocurrency and click quote. The application will show the cryptocurrency price in the chosen currency, along with its image, the highest and lowest price of the day, its variation in the last 24 hours and the last update of the cryptocurrency data.",
    "description3": "You can also quote other cryptocurrencies simply by changing the data.",
    "stack": "Project Stack",
    "stackDescription": "To create a fast and highly interactive user experience, I have carefully selected the right technologies for this project. I used React, one of the most popular tools for building efficient user interfaces.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  },
  "trago-trax": {
    "title": "Trago Trax",
    "type": "Website",
    "about": "About the project",
    "description1": "Website. Facilitates the search for exquisite drinks and cocktails through an organization by carefully selected categories.",
    "description2": "Allowing you to find the perfect drink recipes that fit your individual preferences and needs.",
    "description3": "When a user clicks on the view recipe button for any drink, a modal popup window opens showing an informative card. This card provides the drink image, recipe name, instructions and recipe ingredients",
    "stack": "Project Stack",
    "stackDescription": "The web application was built with a powerful technology stack that includes Vite as build tool and bundler, React for creating a dynamic user interface, and Bootstrap to streamline responsive design. I implemented React's Context API to efficiently manage application state, and used JavaScript to develop interactive functionalities. To make requests to external APIs, I relied on Axios, which allowed me to access updated data and provide a smooth and efficient experience to our users.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  },
  "pelis-pulse": {
    "title": "Pelis Pulse",
    "type": "Website",
    "about": "About the project",
    "description1": "It is a website whose main objective is to facilitate the search for movies classified by genres, such as adventure, horror, etc. When performing a search, the website shows all available movies in that particular genre, starting with the most recent and popular ones. For each movie, its cover, name and release date are shown.",
    "description2": "When a user clicks on a movie, a modal popup window opens showing an informative card. This card provides the movie name, its poster, the categories it belongs to, the rating based on a number of votes and a button that allows viewing a movie summary.",
    "description3": "In addition to the movie search and viewing functionality, the website has a paginator that allows the user to navigate from page to page. Each page shows a total of 20 movies, which helps organize and present information in a more manageable and accessible way.",
    "stack": "Project Stack",
    "stackDescription": "I developed a project using a powerful technology stack. I used Vite as a development environment, React as the main library to build a modular and efficient user interface, making use of Hooks and Context to manage state elegantly. For server communication, I used Axios and for visual design, mui-material and material-icons. The result was an efficient and visually appealing project. I am very satisfied with the results obtained using these technologies.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  },
  "auto-seguro": {
    "title": "Auto Insurance",
    "type": "Web Application",
    "about": "About the project",
    "description1": "Web application that simulates car insurance quotes, provides the opportunity to get a quote, considering various factors such as the age difference, your vehicle brand and the insurance plan you choose.",
    "description2": "To get an accurate quote, you simply need to fill out the detailed form and, based on the options you select, an algorithm is executed to calculate the total cost of the insurance.",
    "description3": "The algorithm starts with a base value of 2000 and, to adequately reflect the depreciation of the car, subtracts 3% for each year of difference. Then, it adjusts the cost by multiplying the result by a specific factor according to the car brand and selected insurance plan. Finally, it returns a result.",
    "stack": "Project Stack",
    "stackDescription": "I developed the project using Vite, a fast development tool, along with React and its hooks like useCallback and useRef. Additionally, I implemented Context API for efficient data management in the application. I also made sure the design was excellent. To achieve this, I used Tailwind CSS, a customizable library that allowed me to create an attractive and easy-to-use interface.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  },
  "bienes-raices": {
    "title": "Real Estate",
    "type": "Website",
    "about": "About the project",
    "description1": "Website with house sale ads, the user has the opportunity to request information about a property for sale or to publish an ad for their property for sale. The site also has a tips blog and a testimonials section. The administrator has full control over ads, sellers and posts.",
    "description2": "I was in charge of laying out the project design with HTML5, CSS3 (Flexbox, Grid), SASS and JavaScript for the hamburger menu and dark mode of the application. The entire website on the client side has a responsive design.",
    "description3": "In the Back-End I created and normalized the MySQL database, programmed in PHP 8 the CRUD of properties and sellers, performed user authentication, so that URLs belonging to the administrator are protected by a login with hashed passwords. Each form is validated according to requirements and protected to prevent code injection.",
    "stack": "Project Stack",
    "stackDescription": "It is a web application developed using the Model-View-Controller (MVC) pattern and is based on the PHP programming language. Additionally, it uses HTML, CSS and JavaScript for creating the user interface and user interaction on the client side. The database used in the application is MySQL.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  },
  "weather-finder": {
    "title": "Weather Now",
    "type": "Web Application",
    "about": "About the project",
    "description1": "It is a web application that provides updated information about weather conditions in various locations. This application allows users to access the website and provide the name of a specific city and select a particular country.",
    "description2": "Once this information is entered, the website will collect meteorological data from external sources through an API to request and receive weather data corresponding to the location specified by the user.",
    "description3": "When meteorological data is obtained from the API, the application is responsible for presenting it to the user in a clear and understandable way.",
    "stack": "Project Stack",
    "stackDescription": "In this project, I used a stack composed of Vite, React, Hooks, Context, JavaScript and Axios. Vite provided a fast development environment, while React, along with Hooks and Context, simplified the creation of interactive interfaces and component state management. JavaScript was the programming language used for the project logic, and Axios handled HTTP requests.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  },
  "plan-gastos": {
    "title": "Expense Planner",
    "type": "Web Application",
    "about": "About the project",
    "description1": "The application helps manage expenses easily. You can add, edit and delete expenses and filter them by category to know what you spend your money on. The application also shows a chart that automatically updates your total, available and spent budget.",
    "description2": "When opening the application, you are asked to enter your budget. Then, you can see the main page with a chart and a button to add expenses from different categories, such as food, transportation, entertainment, etc.",
    "description3": "You can delete or edit existing expenses by swiping right or left. When adding a new expense, you will be asked to write its name, the amount spent and the category.",
    "stack": "Project Stack",
    "stackDescription": "This project used several technological tools. Vite was used to create the application and React to create user interface components and automatically update the page. React Hooks were also used to access state and other methods without needing to create classes. CSS was used to style the application and Local Storage to store and retrieve user budget data.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  },
  "cafe-adicto": {
    "title": "Coffee Addict",
    "type": "Website",
    "about": "About the project",
    "description1": "This website is a paradise for coffee lovers, where they can find everything they need to know about this wonderful world and immerse themselves in its colors, aromas and flavors.",
    "description2": "Within the website, there are different sections, such as courses and workshops with which they can learn from experts and become true coffee connoisseurs. It also has exciting stories and delicious recipes. It also has a contact section with a very attractive form.",
    "description3": "I was in charge of laying out the entire project design using the latest technologies such as HTML5 and CSS3, and I have used advanced techniques such as display grid and flex to ensure that each section adapts perfectly to any device on which the project is viewed.",
    "stack": "Project Stack",
    "stackDescription": "As for the stack of this project, it uses cutting-edge technologies such as HTML5 and CSS. The modern and elegant design is created with Grid and Flexbox, which guarantees an exceptionally smooth user experience.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  },
  "healthy-pets": {
    "title": "Healthy Pets",
    "type": "Web Application",
    "about": "About the project",
    "description1": "The web application is intended to be used by veterinarians to help them track medical and health information of pets in an organized and easy-to-use way.",
    "description2": "The user can add information about each pet of their clients, including name, owner name, contact information and additional notes. Additionally, they can add crucial medical information, such as the date of admission to the veterinarian and the pet's symptoms.",
    "description3": "Once you have registered a patient, it will appear in an organized and easily manageable list. You can edit or delete information at any time, which means you will have complete control over the health and medical information of each pet.",
    "stack": "Project Stack",
    "stackDescription": "I used the JavaScript framework, React, to ensure that the application is highly functional and fast. Additionally, I made sure the design is attractive, modern and fully responsive using Tailwind CSS to style the interface. The form has validations and data is stored in Local Storage.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  },
  "emfestival": {
    "title": "EMFestival",
    "type": "Landing Page",
    "about": "About the project",
    "description1": "Electronic Music Festival is a landing page that aims to provide information about the event. The first impression when entering the page is to transmit through a background video the emotion of living the experience of being present on the day of the event.",
    "description2": "It has different sections, for example, the LineUp with the DJs that will be performing, a photo gallery and an information section about tickets.",
    "description3": "I was in charge of laying out the complete design of the page, from the structure with HTML5, and the styles with CSS3 (flex and grid), coded in SASS. The page is fully responsive, meaning it adapts to different devices.",
    "stack": "Project Stack",
    "stackDescription": "For functionality and animations, the site uses JavaScript and some third-party JavaScript plugins, such as SmoothScroll and ScrollReveal. Additionally, the site uses CSS Grid and Flexbox for the design and layout of page elements.",
    "viewWebsite": "View Website",
    "viewCode": "View Code"
  }
}